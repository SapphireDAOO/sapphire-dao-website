/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type InvoiceStruct = {
  creator: AddressLike;
  payer: AddressLike;
  escrow: AddressLike;
  price: BigNumberish;
  amountPaid: BigNumberish;
  createdAt: BigNumberish;
  paymentTime: BigNumberish;
  holdPeriod: BigNumberish;
  status: BigNumberish;
};

export type InvoiceStructOutput = [
  creator: string,
  payer: string,
  escrow: string,
  price: bigint,
  amountPaid: bigint,
  createdAt: bigint,
  paymentTime: bigint,
  holdPeriod: bigint,
  status: bigint
] & {
  creator: string;
  payer: string;
  escrow: string;
  price: bigint;
  amountPaid: bigint;
  createdAt: bigint;
  paymentTime: bigint;
  holdPeriod: bigint;
  status: bigint;
};

export interface PaymentProcessorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelInvoice"
      | "cancelOwnershipHandover"
      | "completeOwnershipHandover"
      | "createInvoice"
      | "creatorsAction"
      | "getDefaultHoldPeriod"
      | "getFee"
      | "getFeeReceiver"
      | "getInvoiceData"
      | "getNextInvoiceId"
      | "makeInvoicePayment"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "refundPayerAfterWindow"
      | "releaseInvoice"
      | "renounceOwnership"
      | "requestOwnershipHandover"
      | "setDefaultHoldPeriod"
      | "setFee"
      | "setFeeReceiversAddress"
      | "setInvoiceHoldPeriod"
      | "totalInvoiceCreated"
      | "transferOwnership"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InvoiceAccepted"
      | "InvoiceCanceled"
      | "InvoiceCreated"
      | "InvoicePaid"
      | "InvoiceRefunded"
      | "InvoiceRejected"
      | "InvoiceReleased"
      | "OwnershipHandoverCanceled"
      | "OwnershipHandoverRequested"
      | "OwnershipTransferred"
      | "UpdateHoldPeriod"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelInvoice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createInvoice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorsAction",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultHoldPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextInvoiceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeInvoicePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundPayerAfterWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseInvoice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultHoldPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiversAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvoiceHoldPeriod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvoiceCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorsAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultHoldPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextInvoiceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeInvoicePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundPayerAfterWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultHoldPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiversAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvoiceHoldPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvoiceCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace InvoiceAcceptedEvent {
  export type InputTuple = [invoiceId: BigNumberish];
  export type OutputTuple = [invoiceId: bigint];
  export interface OutputObject {
    invoiceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceCanceledEvent {
  export type InputTuple = [invoiceId: BigNumberish];
  export type OutputTuple = [invoiceId: bigint];
  export interface OutputObject {
    invoiceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceCreatedEvent {
  export type InputTuple = [
    invoiceId: BigNumberish,
    creator: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [invoiceId: bigint, creator: string, price: bigint];
  export interface OutputObject {
    invoiceId: bigint;
    creator: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoicePaidEvent {
  export type InputTuple = [
    invoiceId: BigNumberish,
    payer: AddressLike,
    amountPaid: BigNumberish
  ];
  export type OutputTuple = [
    invoiceId: bigint,
    payer: string,
    amountPaid: bigint
  ];
  export interface OutputObject {
    invoiceId: bigint;
    payer: string;
    amountPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceRefundedEvent {
  export type InputTuple = [invoiceId: BigNumberish];
  export type OutputTuple = [invoiceId: bigint];
  export interface OutputObject {
    invoiceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceRejectedEvent {
  export type InputTuple = [invoiceId: BigNumberish];
  export type OutputTuple = [invoiceId: bigint];
  export interface OutputObject {
    invoiceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceReleasedEvent {
  export type InputTuple = [invoiceId: BigNumberish];
  export type OutputTuple = [invoiceId: bigint];
  export interface OutputObject {
    invoiceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipHandoverCanceledEvent {
  export type InputTuple = [pendingOwner: AddressLike];
  export type OutputTuple = [pendingOwner: string];
  export interface OutputObject {
    pendingOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipHandoverRequestedEvent {
  export type InputTuple = [pendingOwner: AddressLike];
  export type OutputTuple = [pendingOwner: string];
  export interface OutputObject {
    pendingOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateHoldPeriodEvent {
  export type InputTuple = [
    invoiceId: BigNumberish,
    releaseDueTimestamp: BigNumberish
  ];
  export type OutputTuple = [invoiceId: bigint, releaseDueTimestamp: bigint];
  export interface OutputObject {
    invoiceId: bigint;
    releaseDueTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentProcessor extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentProcessor;
  waitForDeployment(): Promise<this>;

  interface: PaymentProcessorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelInvoice: TypedContractMethod<
    [_invoiceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelOwnershipHandover: TypedContractMethod<[], [void], "payable">;

  completeOwnershipHandover: TypedContractMethod<
    [pendingOwner: AddressLike],
    [void],
    "payable"
  >;

  createInvoice: TypedContractMethod<
    [_invoicePrice: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  creatorsAction: TypedContractMethod<
    [_invoiceId: BigNumberish, _state: boolean],
    [void],
    "nonpayable"
  >;

  getDefaultHoldPeriod: TypedContractMethod<[], [bigint], "view">;

  getFee: TypedContractMethod<[], [bigint], "view">;

  getFeeReceiver: TypedContractMethod<[], [string], "view">;

  getInvoiceData: TypedContractMethod<
    [_invoiceId: BigNumberish],
    [InvoiceStructOutput],
    "view"
  >;

  getNextInvoiceId: TypedContractMethod<[], [bigint], "view">;

  makeInvoicePayment: TypedContractMethod<
    [_invoiceId: BigNumberish],
    [string],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownershipHandoverExpiresAt: TypedContractMethod<
    [pendingOwner: AddressLike],
    [bigint],
    "view"
  >;

  refundPayerAfterWindow: TypedContractMethod<
    [_invoiceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  releaseInvoice: TypedContractMethod<
    [_invoiceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "payable">;

  requestOwnershipHandover: TypedContractMethod<[], [void], "payable">;

  setDefaultHoldPeriod: TypedContractMethod<
    [_newDefaultHoldPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;

  setFeeReceiversAddress: TypedContractMethod<
    [_newFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setInvoiceHoldPeriod: TypedContractMethod<
    [_invoiceId: BigNumberish, _holdPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalInvoiceCreated: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "payable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelInvoice"
  ): TypedContractMethod<[_invoiceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelOwnershipHandover"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "completeOwnershipHandover"
  ): TypedContractMethod<[pendingOwner: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "createInvoice"
  ): TypedContractMethod<[_invoicePrice: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "creatorsAction"
  ): TypedContractMethod<
    [_invoiceId: BigNumberish, _state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDefaultHoldPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getInvoiceData"
  ): TypedContractMethod<
    [_invoiceId: BigNumberish],
    [InvoiceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextInvoiceId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "makeInvoicePayment"
  ): TypedContractMethod<[_invoiceId: BigNumberish], [string], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownershipHandoverExpiresAt"
  ): TypedContractMethod<[pendingOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundPayerAfterWindow"
  ): TypedContractMethod<[_invoiceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseInvoice"
  ): TypedContractMethod<[_invoiceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "requestOwnershipHandover"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "setDefaultHoldPeriod"
  ): TypedContractMethod<
    [_newDefaultHoldPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeReceiversAddress"
  ): TypedContractMethod<[_newFeeReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInvoiceHoldPeriod"
  ): TypedContractMethod<
    [_invoiceId: BigNumberish, _holdPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalInvoiceCreated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "InvoiceAccepted"
  ): TypedContractEvent<
    InvoiceAcceptedEvent.InputTuple,
    InvoiceAcceptedEvent.OutputTuple,
    InvoiceAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceCanceled"
  ): TypedContractEvent<
    InvoiceCanceledEvent.InputTuple,
    InvoiceCanceledEvent.OutputTuple,
    InvoiceCanceledEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceCreated"
  ): TypedContractEvent<
    InvoiceCreatedEvent.InputTuple,
    InvoiceCreatedEvent.OutputTuple,
    InvoiceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "InvoicePaid"
  ): TypedContractEvent<
    InvoicePaidEvent.InputTuple,
    InvoicePaidEvent.OutputTuple,
    InvoicePaidEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceRefunded"
  ): TypedContractEvent<
    InvoiceRefundedEvent.InputTuple,
    InvoiceRefundedEvent.OutputTuple,
    InvoiceRefundedEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceRejected"
  ): TypedContractEvent<
    InvoiceRejectedEvent.InputTuple,
    InvoiceRejectedEvent.OutputTuple,
    InvoiceRejectedEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceReleased"
  ): TypedContractEvent<
    InvoiceReleasedEvent.InputTuple,
    InvoiceReleasedEvent.OutputTuple,
    InvoiceReleasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipHandoverCanceled"
  ): TypedContractEvent<
    OwnershipHandoverCanceledEvent.InputTuple,
    OwnershipHandoverCanceledEvent.OutputTuple,
    OwnershipHandoverCanceledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipHandoverRequested"
  ): TypedContractEvent<
    OwnershipHandoverRequestedEvent.InputTuple,
    OwnershipHandoverRequestedEvent.OutputTuple,
    OwnershipHandoverRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateHoldPeriod"
  ): TypedContractEvent<
    UpdateHoldPeriodEvent.InputTuple,
    UpdateHoldPeriodEvent.OutputTuple,
    UpdateHoldPeriodEvent.OutputObject
  >;

  filters: {
    "InvoiceAccepted(uint256)": TypedContractEvent<
      InvoiceAcceptedEvent.InputTuple,
      InvoiceAcceptedEvent.OutputTuple,
      InvoiceAcceptedEvent.OutputObject
    >;
    InvoiceAccepted: TypedContractEvent<
      InvoiceAcceptedEvent.InputTuple,
      InvoiceAcceptedEvent.OutputTuple,
      InvoiceAcceptedEvent.OutputObject
    >;

    "InvoiceCanceled(uint256)": TypedContractEvent<
      InvoiceCanceledEvent.InputTuple,
      InvoiceCanceledEvent.OutputTuple,
      InvoiceCanceledEvent.OutputObject
    >;
    InvoiceCanceled: TypedContractEvent<
      InvoiceCanceledEvent.InputTuple,
      InvoiceCanceledEvent.OutputTuple,
      InvoiceCanceledEvent.OutputObject
    >;

    "InvoiceCreated(uint256,address,uint256)": TypedContractEvent<
      InvoiceCreatedEvent.InputTuple,
      InvoiceCreatedEvent.OutputTuple,
      InvoiceCreatedEvent.OutputObject
    >;
    InvoiceCreated: TypedContractEvent<
      InvoiceCreatedEvent.InputTuple,
      InvoiceCreatedEvent.OutputTuple,
      InvoiceCreatedEvent.OutputObject
    >;

    "InvoicePaid(uint256,address,uint256)": TypedContractEvent<
      InvoicePaidEvent.InputTuple,
      InvoicePaidEvent.OutputTuple,
      InvoicePaidEvent.OutputObject
    >;
    InvoicePaid: TypedContractEvent<
      InvoicePaidEvent.InputTuple,
      InvoicePaidEvent.OutputTuple,
      InvoicePaidEvent.OutputObject
    >;

    "InvoiceRefunded(uint256)": TypedContractEvent<
      InvoiceRefundedEvent.InputTuple,
      InvoiceRefundedEvent.OutputTuple,
      InvoiceRefundedEvent.OutputObject
    >;
    InvoiceRefunded: TypedContractEvent<
      InvoiceRefundedEvent.InputTuple,
      InvoiceRefundedEvent.OutputTuple,
      InvoiceRefundedEvent.OutputObject
    >;

    "InvoiceRejected(uint256)": TypedContractEvent<
      InvoiceRejectedEvent.InputTuple,
      InvoiceRejectedEvent.OutputTuple,
      InvoiceRejectedEvent.OutputObject
    >;
    InvoiceRejected: TypedContractEvent<
      InvoiceRejectedEvent.InputTuple,
      InvoiceRejectedEvent.OutputTuple,
      InvoiceRejectedEvent.OutputObject
    >;

    "InvoiceReleased(uint256)": TypedContractEvent<
      InvoiceReleasedEvent.InputTuple,
      InvoiceReleasedEvent.OutputTuple,
      InvoiceReleasedEvent.OutputObject
    >;
    InvoiceReleased: TypedContractEvent<
      InvoiceReleasedEvent.InputTuple,
      InvoiceReleasedEvent.OutputTuple,
      InvoiceReleasedEvent.OutputObject
    >;

    "OwnershipHandoverCanceled(address)": TypedContractEvent<
      OwnershipHandoverCanceledEvent.InputTuple,
      OwnershipHandoverCanceledEvent.OutputTuple,
      OwnershipHandoverCanceledEvent.OutputObject
    >;
    OwnershipHandoverCanceled: TypedContractEvent<
      OwnershipHandoverCanceledEvent.InputTuple,
      OwnershipHandoverCanceledEvent.OutputTuple,
      OwnershipHandoverCanceledEvent.OutputObject
    >;

    "OwnershipHandoverRequested(address)": TypedContractEvent<
      OwnershipHandoverRequestedEvent.InputTuple,
      OwnershipHandoverRequestedEvent.OutputTuple,
      OwnershipHandoverRequestedEvent.OutputObject
    >;
    OwnershipHandoverRequested: TypedContractEvent<
      OwnershipHandoverRequestedEvent.InputTuple,
      OwnershipHandoverRequestedEvent.OutputTuple,
      OwnershipHandoverRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdateHoldPeriod(uint256,uint256)": TypedContractEvent<
      UpdateHoldPeriodEvent.InputTuple,
      UpdateHoldPeriodEvent.OutputTuple,
      UpdateHoldPeriodEvent.OutputObject
    >;
    UpdateHoldPeriod: TypedContractEvent<
      UpdateHoldPeriodEvent.InputTuple,
      UpdateHoldPeriodEvent.OutputTuple,
      UpdateHoldPeriodEvent.OutputObject
    >;
  };
}
